@page "/items"

@using InteractiveHelper.CatalogAdminPanel.Components

@layout MainLayout

@attribute [Authorize]

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IItemService itemService
@inject NavigationManager navigationManager

<MudText Typo="Typo.h4" Class="ma-8">Items</MudText>

<MudTable Items="@ItemList" Class="ma-8" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<ItemOutModel,bool>(FilterFuncSimple)">
    <ColGroup>
        <col style="width:50px;" />
        <col />
        <col />
        <col />
        <col />
        <col style="width:100px;" />
    </ColGroup>
    <ToolBarContent>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => AddItem())">Add</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Brand</MudTh>
        <MudTh>Category</MudTh>
        <MudTh>Description</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Brand">@context.Brand</MudTd>
        <MudTd DataLabel="Category">@context.Category</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => UpdateItem(context.Id))" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => DeleteItem(context.Id))" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;

    private string searchString = "";

    private IEnumerable<ItemOutModel> ItemList = new List<ItemOutModel>();

    private async Task ReloadData()
    {
        ItemList = await itemService.GetItems(0, 100);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private bool FilterFuncSimple(ItemOutModel BookListItem) => FilterFunc(BookListItem, searchString);

    private bool FilterFunc(ItemOutModel BookListItem, string searchString)
    {
        return 
            string.IsNullOrWhiteSpace(searchString)
            ||
            BookListItem.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            ||
            BookListItem.Brand.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            ||
            BookListItem.Category.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            ||
            BookListItem.Description.Contains(searchString)
        ;
    }

    private async Task AddItem()
    {
        var parameters = new DialogParameters {};
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = DialogService.Show<ItemDialog>("Add item?", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await itemService.AddItem(((ItemDialog)dialog.Dialog).model);
            await ReloadData();
        }
    }

    private async Task UpdateItem(int itemId)
    {
        var parameters = new DialogParameters();
        parameters.Add("BookId", itemId);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<ItemDialog>("Update item?", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await itemService.UpdateItem(itemId, ((ItemDialog)dialog.Dialog).model);
            await ReloadData();
        }
    }

    private async Task DeleteItem(int itemId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Are you sure want to delete this item? This action cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmationDialog>("Delete item?", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await itemService.DeleteItem(itemId);
            await ReloadData();
        }
    }
}